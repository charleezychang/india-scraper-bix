import { getDatabase, ref, set, onValue, push, remove, get } from "firebase/database";
import { Card } from "../interfaces";
import useFirebaseAuth from "./useFirebaseAuth";
import dayjs, { Dayjs } from "dayjs";
import { useState } from "react";

function useFirebaseDatabase() {
    const { user } = useFirebaseAuth()
    const db = getDatabase();
    const [isLoading, setIsLoading] = useState(false)
    const [deck, setDeck] = useState<Card[] | null>(null)

    function addCard(card: Card, cooldown?: number) {
        // set will rewrite unless u add 'push'
        // set(ref(db, 'users/' + user.uid), card);
        setIsLoading(true)
        // userId/cards/date
        if (typeof cooldown !== 'undefined') {
            set(push(ref(db, user?.uid + '/cards/' + dayjs().add(cooldown, 'day').format('MM/DD/YYYY').replaceAll('/', ''))), card)
                .then(_res => { setIsLoading(false) })
        }
        else {
            set(push(ref(db, user?.uid + '/cards/' + dayjs().format('MM/DD/YYYY').replaceAll('/', ''))), card)
                .then(_res => { setIsLoading(false) })
        }
    }

    function readCard(datetime: Dayjs) {
        if (user) {
            // listener receives a snapshot that contains the data at the specified path
            onValue(ref(db, user.uid + '/cards/' + datetime.format('MM/DD/YYYY').replaceAll('/', '')), (snapshot) => {
                // val() gets the data (only one)
                const data = snapshot.val()
            });
        }
    }

    async function readDeck(datetime: Dayjs) {
        return new Promise((resolve) => {
            const deck: Card[] = [];

            onValue(
                ref(db, user?.uid + "/cards/" + datetime.format("MM/DD/YYYY").replaceAll("/", "")),
                (snapshot) => {
                    if (snapshot.exists()) {
                        snapshot.forEach((childSnapshot) => {
                            const key = childSnapshot.key;
                            const value = childSnapshot.val();

                            deck.push({
                                [key as string]: value,
                            });
                        });
                    } else {
                        console.log("No data available");
                    }

                    resolve(deck);
                }
            );
        });
    }

    async function initializeDeck() {
        const snapshot = await get(ref(db, `${user?.uid}/cards`));

        if (snapshot.exists()) {
            const datesAsKeys: any[] = [];
            const cardsAsObjects: any[] = [];

            snapshot.forEach((childSnapshot) => {
                const dateAsKey = childSnapshot.key;
                const cardsAsObject = childSnapshot.val();

                if (formatKeyToDate(dateAsKey).isBefore(dayjs(), 'day')) {
                    datesAsKeys.push(dateAsKey);
                    cardsAsObjects.push(cardsAsObject);
                }
            });

            if (datesAsKeys.length > 0) {
                datesAsKeys.forEach((dateAsKey: string, index: number) => {
                    for (const autogeneratedKey in cardsAsObjects[index]) {
                        addCard(cardsAsObjects[index][autogeneratedKey]);
                    }
                    deleteDeck(dateAsKey);
                });
            }
        } else {
            console.log('No data available');
        }
    }


    function removeCard(autogeneratedKey: string) {
        remove(ref(db, user?.uid + '/cards/' + dayjs().format('MM/DD/YYYY').replaceAll('/', '') + '/' + autogeneratedKey))
    }

    function formatKeyToDate(key: string | null): Dayjs {
        return dayjs(key?.replace(/(\d{2})(\d{2})(\d{4})/, "$1/$2/$3"))
    }

    function deleteDeck(deck: string | null) {
        remove(ref(db, user?.uid + "/cards/" + deck))
    }

    return {
        addCard: addCard,
        readDeck: readDeck,
        removeCard: removeCard,
        initializeDeck: initializeDeck,
        isLoading: isLoading
    }
}

export default useFirebaseDatabase
