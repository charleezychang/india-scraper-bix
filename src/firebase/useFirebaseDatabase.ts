import { getDatabase, ref, set, onValue, push, remove } from "firebase/database";
import { Card } from "../interfaces";
import useFirebaseAuth from "./useFirebaseAuth";
import dayjs, { Dayjs } from "dayjs";
import { useState } from "react";

function useFirebaseDatabase() {
    const { user } = useFirebaseAuth()
    const db = getDatabase();
    const [isLoading, setIsLoading] = useState(false)
    const [deck, setDeck] = useState<Card[] | null>(null)

    function addCard(card: Card) {
        // set will rewrite unless u add 'push'
        // set(ref(db, 'users/' + user.uid), card);

        // userId/cards/date
        // console.log(card)
        set(push(ref(db, user?.uid + '/cards/' + dayjs().format('MM/DD/YYYY').toString().replaceAll('/', ''))), card)
    }

    function readCard() {
        if (user) {
            // listener receives a snapshot that contains the data at the specified path
            onValue(ref(db, 'users/' + user.uid + '/cards'), (snapshot) => {
                // val() gets the data (only one)
                const data = snapshot.val()
            });
        }
    }

    function readDeck() {
        const deck: Card[] = []
        // get all decks

        onValue(ref(db, user?.uid + '/cards'), (snapshot) => {
            if (snapshot.exists()) {
                snapshot.forEach(childSnapshot => {
                    const key = childSnapshot.key
                    const value = childSnapshot.val()

                    deck.push({
                        [key as string]: value
                    })
                })
            }
            else {
                console.log("No data available")
            }
        });

        return deck
    }

    // Initialize deck, move cards that are due to todays deck
    function initializeDeck() {
        const datesAsKeys: any = []
        const cardsAsObjects: any = []

        onValue(ref(db, user?.uid + '/cards'), (snapshot) => {
            if (snapshot.exists()) {
                snapshot.forEach(childSnapshot => {
                    const dateAsKey = childSnapshot.key
                    const cardsAsObject = childSnapshot.val()

                    // If date is lower than today, then move all the cards inside it for todays deck
                    if (formatKeyToDate(dateAsKey).isBefore(dayjs(), 'day')) {
                        datesAsKeys.push(dateAsKey)
                        cardsAsObjects.push(cardsAsObject)
                    }
                })
            }
            else {
                console.log("No data available")
            }
        })


        if (datesAsKeys.length > 0) {
            datesAsKeys.forEach((dateAsKey: string, index: number) => {
                for (const autogeneratedKey in cardsAsObjects[index]) {
                    addCard(cardsAsObjects[index][autogeneratedKey])
                }
                deleteDeck(dateAsKey)
            })
        }
    }

    function updateCard() {

    }

    function writeUser() {

    }

    function formatKeyToDate(key: string | null): Dayjs {
        return dayjs(key?.replace(/(\d{2})(\d{2})(\d{4})/, "$1/$2/$3"))
    }

    function deleteDeck(deck: string | null) {
        remove(ref(db, user?.uid + "/cards/" + deck))
    }

    return {
        addCard: (card: Card) => addCard(card),
        readDeck: readDeck,
        initializeDeck: initializeDeck
    }
}

export default useFirebaseDatabase
